<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }

    #game-container {
      position: relative;
      width: 100vw;
      height: 100vh;
      background-color: #f0f0f0;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      font-family: Arial, sans-serif;
    }

    #start-menu {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    #game {
      display: none;
    }

    .player {
      position: absolute;
      width: 20px;
      height: 20px;
      border-radius: 50%;
    }

    .purple-gem, .green-gem {
      position: absolute;
      width: 15px;
      height: 15px;
      border-radius: 50%;
    }

    #indicators {
      position: absolute;
      top: 10px;
      right: 10px;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
    }

    #result-screen {
      display: none;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
    }

    #result-screen button {
      margin: 10px;
      padding: 15px 30px;
      font-size: 16px;
    }
  </style>
  <title>Juego de Joyas</title>
</head>
<body>
  <div id="start-menu">
    <button onclick="startGame()">Empezar</button>
  </div>

  <div id="game">
    <div id="game-container">
      <div id="indicators">
        <div id="purple-indicator">Moradas: 0/8</div>
        <div id="green-indicator">Verdes: 0/10</div>
        <div id="timer"></div>
      </div>

      <div id="result-screen">
        <button onclick="restartGame()">Reintentar</button>
        <button onclick="finishGame()">Finalizar</button>
      </div>

      <div id="player" class="player"></div>
      <div class="purple-gem"></div>
      <div class="green-gem"></div>
    </div>
  </div>

  <script>
    let playerColor = 'yellow';
    let purpleGemCount = 0;
    let greenGemCount = 0;
    let timer;

    function startGame() {
      const startMenu = document.getElementById('start-menu');
      const gameContainer = document.getElementById('game-container');
      const game = document.getElementById('game');
      const player = document.getElementById('player');

      startMenu.style.display = 'none';
      game.style.display = 'flex';

      // Set player color
      player.style.backgroundColor = playerColor;

      // Set up gems
      spawnGems();

      // Set up indicators
      updateIndicators();

      // Set up timer
      timer = 45;
      updateTimer();
      setInterval(updateTimer, 1000);

      // Set up key event listener
      document.addEventListener('keydown', movePlayer);
    }

    function movePlayer(event) {
      const player = document.getElementById('player');
      const speed = 10;
      const keyCode = event.keyCode;

      if (keyCode === 87) { // W key
        player.style.top = `${Math.max(0, player.offsetTop - speed)}px`;
      } else if (keyCode === 65) { // A key
        player.style.left = `${Math.max(0, player.offsetLeft - speed)}px`;
      } else if (keyCode === 83) { // S key
        player.style.top = `${Math.min(window.innerHeight - player.offsetHeight, player.offsetTop + speed)}px`;
      } else if (keyCode === 68) { // D key
        player.style.left = `${Math.min(window.innerWidth - player.offsetWidth, player.offsetLeft + speed)}px`;
      }

      checkCollisions();
    }

    function spawnGems() {
      const purpleGem = document.querySelector('.purple-gem');
      const greenGem = document.querySelector('.green-gem');

      purpleGem.style.backgroundColor = 'purple';
      greenGem.style.backgroundColor = 'green';

      purpleGem.style.top = `${Math.random() * (window.innerHeight - purpleGem.offsetHeight)}px`;
      purpleGem.style.left = `${Math.random() * (window.innerWidth - purpleGem.offsetWidth)}px`;

      greenGem.style.top = `${Math.random() * (window.innerHeight - greenGem.offsetHeight)}px`;
      greenGem.style.left = `${Math.random() * (window.innerWidth - greenGem.offsetWidth)}px`;
    }

    function checkCollisions() {
      const player = document.getElementById('player');
      const purpleGem = document.querySelector('.purple-gem');
      const greenGem = document.querySelector('.green-gem');

      const playerRect = player.getBoundingClientRect();
      const purpleGemRect = purpleGem.getBoundingClientRect();
      const greenGemRect = greenGem.getBoundingClientRect();

      if (isCollision(playerRect, purpleGemRect)) {
        purpleGemCount++;
        updateIndicators();
        spawnGems();
        checkWin();
      }

      if (isCollision(playerRect, greenGemRect)) {
        greenGemCount++;
        updateIndicators();
        spawnGems();
        checkWin();
      }
    }

    function isCollision(rect1, rect2) {
      return (
        rect1.x < rect2.x + rect2.width &&
        rect1.x + rect1.width > rect2.x &&
        rect1.y < rect2.y + rect2.height &&
        rect1.y + rect1.height > rect2.y
      );
    }

    function updateIndicators() {
      document.getElementById('purple-indicator').textContent = `Moradas: ${purpleGemCount}/8`;
      document.getElementById('green-indicator').textContent = `Verdes: ${greenGemCount}/10`;
    }

    function updateTimer() {
      const timerElement = document.getElementById('timer');
      timerElement.textContent = `Tiempo: ${timer}s`;

      if (timer === 0) {
        endGame();
      } else {
        timer--;
      }
    }

    function checkWin() {
      if (purpleGemCount === 8 && greenGemCount === 10) {
        endGame(true);
      }
    }

    function endGame(win = false) {
      document.removeEventListener('keydown', movePlayer);
      const resultScreen = document.getElementById('result-screen');
      resultScreen.style.display = 'block';

      if (win) {
        resultScreen.innerHTML = '<h1>¡Has ganado!</h1>';
      } else {
        resultScreen.innerHTML = '<h1>¡Tiempo agotado!</h1>';
      }
    }

    function restartGame() {
      const resultScreen = document.getElementById('result-screen');
      resultScreen.style.display = 'none';

      purpleGemCount = 0;
      greenGemCount = 0;
      timer = 45;

      const startMenu = document.getElementById('start-menu');
      startMenu.style.display = 'flex';

      const game = document.getElementById('game');
      game.style.display = 'none';

      document.getElementById('player').style.top = '0px';
      document.getElementById('player').style.left = '0px';
    }
  </script>
</body>
</html>

